[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "calculate_ft_per_pixel",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(\"[HUMP] Cow pixel:\", cow_bbox_height)\n    return ft_per_pixel\ndef detect_hump(image):\n    model = YOLO(HUMP_MODEL_PATH)\n    results = model(image)[0]\n    output_image = image.copy()\n    cow_detected = False",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "detect_hump",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def detect_hump(image):\n    model = YOLO(HUMP_MODEL_PATH)\n    results = model(image)[0]\n    output_image = image.copy()\n    cow_detected = False\n    hump_area_sqft = None\n    hump_detected= False\n    FT_PER_PIXEL = None\n    for box, cls in zip(results.boxes.xyxy.cpu().numpy(), results.boxes.cls.cpu().numpy()):\n        x1, y1, x2, y2 = map(int, box)",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "get_hoof_angle",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def get_hoof_angle(hoof_crop, bbox_coords):\n    if hoof_crop.shape[0] < 10 or hoof_crop.shape[1] < 10:\n        return None, None, None\n    gray = cv2.cvtColor(hoof_crop, cv2.COLOR_BGR2GRAY)\n    blurred = cv2.GaussianBlur(gray, (5, 5), 0)\n    binary_mask = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\n                                        cv2.THRESH_BINARY_INV, 11, 2)\n    contours, _ = cv2.findContours(binary_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    valid_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > MIN_CONTOUR_AREA]\n    if not valid_contours:",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "draw_angle_overlay",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def draw_angle_overlay(image, angle, box):\n    box = np.intp(box)\n    cv2.drawContours(image, [box], 0, (0, 0, 255), 2)\n    cv2.line(image, tuple(box[0]), tuple(box[1]), (255, 0, 0), 2)\n    cv2.line(image, tuple(box[1]), tuple(box[2]), (0, 255, 0), 2)\n    cv2.line(image, tuple(box[2]), tuple(box[3]), (0, 255, 255), 2)\n    cv2.line(image, tuple(box[3]), tuple(box[0]), (255, 0, 255), 2)\n    green_lower = box[1] if box[1][1] > box[2][1] else box[2]\n    magenta_upper = box[3] if box[3][1] < box[0][1] else box[0]\n    cv2.line(image, tuple(green_lower), tuple(magenta_upper), (0, 255, 255), 2)",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "detect_hoof_and_angle",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def detect_hoof_and_angle(image):\n    model = YOLO(HOOF_MODEL_PATH)\n    results = model(image)[0]\n    output_image = image.copy()\n    for box in results.boxes:\n        cls = int(box.cls[0])\n        class_name = model.names[cls]\n        conf = float(box.conf[0])\n        if class_name.lower() == CLASS_NAME.lower():\n            x1, y1, x2, y2 = map(int, box.xyxy[0])",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def main():\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    image = cv2.imread(IMAGE_PATH)\n    if image is None:\n        print(\"❌ Failed to load image.\")\n        return\n    # Detect hump and cow\n    hump_image = detect_hump(image)\n    # Detect hoof and angle\n    final_image = detect_hoof_and_angle(hump_image)",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "HUMP_MODEL_PATH",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "HUMP_MODEL_PATH = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/runs/detect/cow_hump_hoof_yolov123/weights/best.pt\"\nHOOF_MODEL_PATH = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/runs/detect/cow_hump_hoof_yolov123/weights/best.pt\"\nIMAGE_PATH = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/big-red-brown-brahman-bull-600nw-2316454203.jpg.webp\"\nOUTPUT_DIR = \"output\"\nCLASS_NAME = \"hoof\"\nMIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "HOOF_MODEL_PATH",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "HOOF_MODEL_PATH = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/runs/detect/cow_hump_hoof_yolov123/weights/best.pt\"\nIMAGE_PATH = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/big-red-brown-brahman-bull-600nw-2316454203.jpg.webp\"\nOUTPUT_DIR = \"output\"\nCLASS_NAME = \"hoof\"\nMIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "IMAGE_PATH",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "IMAGE_PATH = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/big-red-brown-brahman-bull-600nw-2316454203.jpg.webp\"\nOUTPUT_DIR = \"output\"\nCLASS_NAME = \"hoof\"\nMIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "OUTPUT_DIR = \"output\"\nCLASS_NAME = \"hoof\"\nMIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(\"[HUMP] Cow pixel:\", cow_bbox_height)",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "CLASS_NAME",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "CLASS_NAME = \"hoof\"\nMIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(\"[HUMP] Cow pixel:\", cow_bbox_height)\n    return ft_per_pixel",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "MIN_CONTOUR_AREA",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "MIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(\"[HUMP] Cow pixel:\", cow_bbox_height)\n    return ft_per_pixel\ndef detect_hump(image):",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "REAL_COW_HEIGHT_FT",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "REAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(\"[HUMP] Cow pixel:\", cow_bbox_height)\n    return ft_per_pixel\ndef detect_hump(image):\n    model = YOLO(HUMP_MODEL_PATH)",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "PIXEL_TO_SQFT",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "PIXEL_TO_SQFT = None  # This will be calculated dynamically\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(\"[HUMP] Cow pixel:\", cow_bbox_height)\n    return ft_per_pixel\ndef detect_hump(image):\n    model = YOLO(HUMP_MODEL_PATH)\n    results = model(image)[0]",
        "detail": "work",
        "documentation": {}
    }
]