[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "calculate_ft_per_pixel",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(f\"[DETECTION] Cow pixel height: {cow_bbox_height}, ft/pixel: {ft_per_pixel:.4f}\")\n    return ft_per_pixel\ndef get_hoof_angle(hoof_crop, bbox_coords):\n    if hoof_crop.shape[0] < 10 or hoof_crop.shape[1] < 10:\n        print(\"[HOOF] Hoof crop too small:\", hoof_crop.shape)\n        return None, None, None\n    gray = cv2.cvtColor(hoof_crop, cv2.COLOR_BGR2GRAY)",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "get_hoof_angle",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def get_hoof_angle(hoof_crop, bbox_coords):\n    if hoof_crop.shape[0] < 10 or hoof_crop.shape[1] < 10:\n        print(\"[HOOF] Hoof crop too small:\", hoof_crop.shape)\n        return None, None, None\n    gray = cv2.cvtColor(hoof_crop, cv2.COLOR_BGR2GRAY)\n    blurred = cv2.GaussianBlur(gray, (5, 5), 0)\n    binary_mask = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\n                                        cv2.THRESH_BINARY_INV, 11, 2)\n    contours, _ = cv2.findContours(binary_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    valid_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > MIN_CONTOUR_AREA]",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "draw_angle_overlay",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def draw_angle_overlay(image, angle, box):\n    box = np.intp(box)\n    cv2.drawContours(image, [box], 0, (0, 0, 255), 2)\n    cv2.line(image, tuple(box[0]), tuple(box[1]), (255, 0, 0), 2)\n    cv2.line(image, tuple(box[1]), tuple(box[2]), (0, 255, 0), 2)\n    cv2.line(image, tuple(box[2]), tuple(box[3]), (0, 255, 255), 2)\n    cv2.line(image, tuple(box[3]), tuple(box[0]), (255, 0, 255), 2)\n    green_lower = box[1] if box[1][1] > box[2][1] else box[2]\n    magenta_upper = box[3] if box[3][1] < box[0][1] else box[0]\n    cv2.line(image, tuple(green_lower), tuple(magenta_upper), (0, 255, 255), 2)",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "detect_objects_and_angle",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def detect_objects_and_angle(image):\n    global PIXEL_TO_SQFT  # Declare global at the start of the function\n    try:\n        model = YOLO(MODEL_PATH)\n        print(\"[DETECTION] Model loaded successfully\")\n        print(\"[DETECTION] Model class names:\", model.names)\n    except Exception as e:\n        print(f\"[ERROR] Failed to load model: {e}\")\n        return image\n    results = model(image, conf=CONF_THRESHOLD, iou=IOU_THRESHOLD, verbose=True)[0]",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "def main():\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    # Supported image extensions\n    image_extensions = ('.jpg', '.jpeg', '.png')\n    # Get list of image files in INPUT_DIR\n    image_files = [f for f in os.listdir(INPUT_DIR) if f.lower().endswith(image_extensions)]\n    if not image_files:\n        print(f\"❌ No images found in {INPUT_DIR}\")\n        return\n    print(f\"[INFO] Found {len(image_files)} images in {INPUT_DIR}\")",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "MODEL_PATH",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "MODEL_PATH = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/fastcnn/best.pt\"\nINPUT_DIR = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/fastcnn/Foot-4/test/images\"  # Folder containing input images\nOUTPUT_DIR = \"output\"\nMIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\nCONF_THRESHOLD = 0.2  # Confidence threshold from your code\nIOU_THRESHOLD = 0.1  # Increased IoU threshold for NMS to reduce duplicates\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "INPUT_DIR",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "INPUT_DIR = \"/Users/hammadsafi/StudioProjects/MyApplication/COW/fastcnn/Foot-4/test/images\"  # Folder containing input images\nOUTPUT_DIR = \"output\"\nMIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\nCONF_THRESHOLD = 0.2  # Confidence threshold from your code\nIOU_THRESHOLD = 0.1  # Increased IoU threshold for NMS to reduce duplicates\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "OUTPUT_DIR = \"output\"\nMIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\nCONF_THRESHOLD = 0.2  # Confidence threshold from your code\nIOU_THRESHOLD = 0.1  # Increased IoU threshold for NMS to reduce duplicates\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "MIN_CONTOUR_AREA",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "MIN_CONTOUR_AREA = 50\nREAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\nCONF_THRESHOLD = 0.2  # Confidence threshold from your code\nIOU_THRESHOLD = 0.1  # Increased IoU threshold for NMS to reduce duplicates\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(f\"[DETECTION] Cow pixel height: {cow_bbox_height}, ft/pixel: {ft_per_pixel:.4f}\")",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "REAL_COW_HEIGHT_FT",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "REAL_COW_HEIGHT_FT = 3  # Real height of the cow in feet\nPIXEL_TO_SQFT = None  # This will be calculated dynamically\nCONF_THRESHOLD = 0.2  # Confidence threshold from your code\nIOU_THRESHOLD = 0.1  # Increased IoU threshold for NMS to reduce duplicates\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(f\"[DETECTION] Cow pixel height: {cow_bbox_height}, ft/pixel: {ft_per_pixel:.4f}\")\n    return ft_per_pixel",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "PIXEL_TO_SQFT",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "PIXEL_TO_SQFT = None  # This will be calculated dynamically\nCONF_THRESHOLD = 0.2  # Confidence threshold from your code\nIOU_THRESHOLD = 0.1  # Increased IoU threshold for NMS to reduce duplicates\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(f\"[DETECTION] Cow pixel height: {cow_bbox_height}, ft/pixel: {ft_per_pixel:.4f}\")\n    return ft_per_pixel\ndef get_hoof_angle(hoof_crop, bbox_coords):",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "CONF_THRESHOLD",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "CONF_THRESHOLD = 0.2  # Confidence threshold from your code\nIOU_THRESHOLD = 0.1  # Increased IoU threshold for NMS to reduce duplicates\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(f\"[DETECTION] Cow pixel height: {cow_bbox_height}, ft/pixel: {ft_per_pixel:.4f}\")\n    return ft_per_pixel\ndef get_hoof_angle(hoof_crop, bbox_coords):\n    if hoof_crop.shape[0] < 10 or hoof_crop.shape[1] < 10:",
        "detail": "work",
        "documentation": {}
    },
    {
        "label": "IOU_THRESHOLD",
        "kind": 5,
        "importPath": "work",
        "description": "work",
        "peekOfCode": "IOU_THRESHOLD = 0.1  # Increased IoU threshold for NMS to reduce duplicates\n# ---------- CONSTANTS ----------\ndef calculate_ft_per_pixel(cow_bbox_height):\n    \"\"\"Calculate feet per pixel based on the detected cow's height in pixels.\"\"\"\n    ft_per_pixel = REAL_COW_HEIGHT_FT / cow_bbox_height\n    print(f\"[DETECTION] Cow pixel height: {cow_bbox_height}, ft/pixel: {ft_per_pixel:.4f}\")\n    return ft_per_pixel\ndef get_hoof_angle(hoof_crop, bbox_coords):\n    if hoof_crop.shape[0] < 10 or hoof_crop.shape[1] < 10:\n        print(\"[HOOF] Hoof crop too small:\", hoof_crop.shape)",
        "detail": "work",
        "documentation": {}
    }
]